"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _AnalyzeARecipeSearchQuery200Response = _interopRequireDefault(require("../model/AnalyzeARecipeSearchQuery200Response"));
var _AnalyzeRecipeInstructions200Response = _interopRequireDefault(require("../model/AnalyzeRecipeInstructions200Response"));
var _AutocompleteRecipeSearch200ResponseInner = _interopRequireDefault(require("../model/AutocompleteRecipeSearch200ResponseInner"));
var _ClassifyCuisine200Response = _interopRequireDefault(require("../model/ClassifyCuisine200Response"));
var _ComputeGlycemicLoad200Response = _interopRequireDefault(require("../model/ComputeGlycemicLoad200Response"));
var _ComputeGlycemicLoadRequest = _interopRequireDefault(require("../model/ComputeGlycemicLoadRequest"));
var _ConvertAmounts200Response = _interopRequireDefault(require("../model/ConvertAmounts200Response"));
var _CreateRecipeCard200Response = _interopRequireDefault(require("../model/CreateRecipeCard200Response"));
var _GetAnalyzedRecipeInstructions200ResponseInner = _interopRequireDefault(require("../model/GetAnalyzedRecipeInstructions200ResponseInner"));
var _GetRandomRecipes200Response = _interopRequireDefault(require("../model/GetRandomRecipes200Response"));
var _GetRecipeEquipmentByID200Response = _interopRequireDefault(require("../model/GetRecipeEquipmentByID200Response"));
var _GetRecipeIngredientsByID200Response = _interopRequireDefault(require("../model/GetRecipeIngredientsByID200Response"));
var _GetRecipeNutritionWidgetByID200Response = _interopRequireDefault(require("../model/GetRecipeNutritionWidgetByID200Response"));
var _GetRecipePriceBreakdownByID200Response = _interopRequireDefault(require("../model/GetRecipePriceBreakdownByID200Response"));
var _GetSimilarRecipes200ResponseInner = _interopRequireDefault(require("../model/GetSimilarRecipes200ResponseInner"));
var _GuessNutritionByDishName200Response = _interopRequireDefault(require("../model/GuessNutritionByDishName200Response"));
var _IngredientInformation = _interopRequireDefault(require("../model/IngredientInformation"));
var _QuickAnswer200Response = _interopRequireDefault(require("../model/QuickAnswer200Response"));
var _RecipeInformation = _interopRequireDefault(require("../model/RecipeInformation"));
var _SearchRecipes200Response = _interopRequireDefault(require("../model/SearchRecipes200Response"));
var _SearchRecipesByIngredients200ResponseInner = _interopRequireDefault(require("../model/SearchRecipesByIngredients200ResponseInner"));
var _SearchRecipesByNutrients200ResponseInner = _interopRequireDefault(require("../model/SearchRecipesByNutrients200ResponseInner"));
var _SummarizeRecipe200Response = _interopRequireDefault(require("../model/SummarizeRecipe200Response"));
var _TasteInformation = _interopRequireDefault(require("../model/TasteInformation"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Recipes service.
* @module api/RecipesApi
* @version 2.0.2
*/
var RecipesApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new RecipesApi. 
  * @alias module:api/RecipesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function RecipesApi(apiClient) {
    _classCallCheck(this, RecipesApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the analyzeARecipeSearchQuery operation.
   * @callback module:api/RecipesApi~analyzeARecipeSearchQueryCallback
   * @param {String} error Error message, if any.
   * @param {module:model/AnalyzeARecipeSearchQuery200Response} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Analyze a Recipe Search Query
   * Parse a recipe search query to find out its intention.
   * @param {String} q The recipe search query.
   * @param {module:api/RecipesApi~analyzeARecipeSearchQueryCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/AnalyzeARecipeSearchQuery200Response}
   */
  return _createClass(RecipesApi, [{
    key: "analyzeARecipeSearchQuery",
    value: function analyzeARecipeSearchQuery(q, callback) {
      var postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling analyzeARecipeSearchQuery");
      }
      var pathParams = {};
      var queryParams = {
        'q': q
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _AnalyzeARecipeSearchQuery200Response["default"];
      return this.apiClient.callApi('/recipes/queries/analyze', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the analyzeRecipeInstructions operation.
     * @callback module:api/RecipesApi~analyzeRecipeInstructionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyzeRecipeInstructions200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze Recipe Instructions
     * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.
     * @param {String} instructions The recipe's instructions.
     * @param {module:api/RecipesApi~analyzeRecipeInstructionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyzeRecipeInstructions200Response}
     */
  }, {
    key: "analyzeRecipeInstructions",
    value: function analyzeRecipeInstructions(instructions, callback) {
      var postBody = null;
      // verify the required parameter 'instructions' is set
      if (instructions === undefined || instructions === null) {
        throw new Error("Missing the required parameter 'instructions' when calling analyzeRecipeInstructions");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'instructions': instructions
      };
      var authNames = ['apiKeyScheme'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _AnalyzeRecipeInstructions200Response["default"];
      return this.apiClient.callApi('/recipes/analyzeInstructions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the autocompleteRecipeSearch operation.
     * @callback module:api/RecipesApi~autocompleteRecipeSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AutocompleteRecipeSearch200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Autocomplete Recipe Search
     * Autocomplete a partial input to suggest possible recipe names.
     * @param {String} query The (natural language) search query.
     * @param {Object} opts Optional parameters
     * @param {Number} [number = 10)] The maximum number of items to return (between 1 and 100). Defaults to 10.
     * @param {module:api/RecipesApi~autocompleteRecipeSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AutocompleteRecipeSearch200ResponseInner>}
     */
  }, {
    key: "autocompleteRecipeSearch",
    value: function autocompleteRecipeSearch(query, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling autocompleteRecipeSearch");
      }
      var pathParams = {};
      var queryParams = {
        'query': query,
        'number': opts['number']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_AutocompleteRecipeSearch200ResponseInner["default"]];
      return this.apiClient.callApi('/recipes/autocomplete', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the classifyCuisine operation.
     * @callback module:api/RecipesApi~classifyCuisineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassifyCuisine200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classify Cuisine
     * Classify the recipe's cuisine.
     * @param {String} title The title of the recipe.
     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [language] The language of the input. Either 'en' or 'de'.
     * @param {module:api/RecipesApi~classifyCuisineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassifyCuisine200Response}
     */
  }, {
    key: "classifyCuisine",
    value: function classifyCuisine(title, ingredientList, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling classifyCuisine");
      }
      // verify the required parameter 'ingredientList' is set
      if (ingredientList === undefined || ingredientList === null) {
        throw new Error("Missing the required parameter 'ingredientList' when calling classifyCuisine");
      }
      var pathParams = {};
      var queryParams = {
        'language': opts['language']
      };
      var headerParams = {};
      var formParams = {
        'title': title,
        'ingredientList': ingredientList
      };
      var authNames = ['apiKeyScheme'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _ClassifyCuisine200Response["default"];
      return this.apiClient.callApi('/recipes/cuisine', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the computeGlycemicLoad operation.
     * @callback module:api/RecipesApi~computeGlycemicLoadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputeGlycemicLoad200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute Glycemic Load
     * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
     * @param {module:model/ComputeGlycemicLoadRequest} computeGlycemicLoadRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [language] The language of the input. Either 'en' or 'de'.
     * @param {module:api/RecipesApi~computeGlycemicLoadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComputeGlycemicLoad200Response}
     */
  }, {
    key: "computeGlycemicLoad",
    value: function computeGlycemicLoad(computeGlycemicLoadRequest, opts, callback) {
      opts = opts || {};
      var postBody = computeGlycemicLoadRequest;
      // verify the required parameter 'computeGlycemicLoadRequest' is set
      if (computeGlycemicLoadRequest === undefined || computeGlycemicLoadRequest === null) {
        throw new Error("Missing the required parameter 'computeGlycemicLoadRequest' when calling computeGlycemicLoad");
      }
      var pathParams = {};
      var queryParams = {
        'language': opts['language']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ComputeGlycemicLoad200Response["default"];
      return this.apiClient.callApi('/food/ingredients/glycemicLoad', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the convertAmounts operation.
     * @callback module:api/RecipesApi~convertAmountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConvertAmounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert Amounts
     * Convert amounts like \"2 cups of flour to grams\".
     * @param {String} ingredientName The ingredient which you want to convert.
     * @param {Number} sourceAmount The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".
     * @param {String} sourceUnit The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
     * @param {String} targetUnit The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
     * @param {module:api/RecipesApi~convertAmountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConvertAmounts200Response}
     */
  }, {
    key: "convertAmounts",
    value: function convertAmounts(ingredientName, sourceAmount, sourceUnit, targetUnit, callback) {
      var postBody = null;
      // verify the required parameter 'ingredientName' is set
      if (ingredientName === undefined || ingredientName === null) {
        throw new Error("Missing the required parameter 'ingredientName' when calling convertAmounts");
      }
      // verify the required parameter 'sourceAmount' is set
      if (sourceAmount === undefined || sourceAmount === null) {
        throw new Error("Missing the required parameter 'sourceAmount' when calling convertAmounts");
      }
      // verify the required parameter 'sourceUnit' is set
      if (sourceUnit === undefined || sourceUnit === null) {
        throw new Error("Missing the required parameter 'sourceUnit' when calling convertAmounts");
      }
      // verify the required parameter 'targetUnit' is set
      if (targetUnit === undefined || targetUnit === null) {
        throw new Error("Missing the required parameter 'targetUnit' when calling convertAmounts");
      }
      var pathParams = {};
      var queryParams = {
        'ingredientName': ingredientName,
        'sourceAmount': sourceAmount,
        'sourceUnit': sourceUnit,
        'targetUnit': targetUnit
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ConvertAmounts200Response["default"];
      return this.apiClient.callApi('/recipes/convert', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the createRecipeCard operation.
     * @callback module:api/RecipesApi~createRecipeCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRecipeCard200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Recipe Card
     * Generate a recipe card for a recipe.
     * @param {String} title The title of the recipe.
     * @param {String} ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
     * @param {String} instructions The instructions to make the recipe. One step per line (separate lines with \\\\n).
     * @param {Number} readyInMinutes The number of minutes it takes to get the recipe on the table.
     * @param {Number} servings The number of servings the recipe makes.
     * @param {module:model/String} mask The mask to put over the recipe image ('ellipseMask', 'diamondMask', 'starMask', 'heartMask', 'potMask', 'fishMask').
     * @param {module:model/String} backgroundImage The background image ('none', 'background1', or 'background2').
     * @param {Object} opts Optional parameters
     * @param {File} [image] The binary image of the recipe as jpg.
     * @param {String} [imageUrl] If you do not sent a binary image you can also pass the image URL.
     * @param {String} [author] The author of the recipe.
     * @param {String} [backgroundColor] The background color for the recipe card as a hex-string.
     * @param {String} [fontColor] The font color for the recipe card as a hex-string.
     * @param {String} [source] The source of the recipe.
     * @param {module:api/RecipesApi~createRecipeCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRecipeCard200Response}
     */
  }, {
    key: "createRecipeCard",
    value: function createRecipeCard(title, ingredients, instructions, readyInMinutes, servings, mask, backgroundImage, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling createRecipeCard");
      }
      // verify the required parameter 'ingredients' is set
      if (ingredients === undefined || ingredients === null) {
        throw new Error("Missing the required parameter 'ingredients' when calling createRecipeCard");
      }
      // verify the required parameter 'instructions' is set
      if (instructions === undefined || instructions === null) {
        throw new Error("Missing the required parameter 'instructions' when calling createRecipeCard");
      }
      // verify the required parameter 'readyInMinutes' is set
      if (readyInMinutes === undefined || readyInMinutes === null) {
        throw new Error("Missing the required parameter 'readyInMinutes' when calling createRecipeCard");
      }
      // verify the required parameter 'servings' is set
      if (servings === undefined || servings === null) {
        throw new Error("Missing the required parameter 'servings' when calling createRecipeCard");
      }
      // verify the required parameter 'mask' is set
      if (mask === undefined || mask === null) {
        throw new Error("Missing the required parameter 'mask' when calling createRecipeCard");
      }
      // verify the required parameter 'backgroundImage' is set
      if (backgroundImage === undefined || backgroundImage === null) {
        throw new Error("Missing the required parameter 'backgroundImage' when calling createRecipeCard");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'title': title,
        'ingredients': ingredients,
        'instructions': instructions,
        'readyInMinutes': readyInMinutes,
        'servings': servings,
        'mask': mask,
        'backgroundImage': backgroundImage,
        'image': opts['image'],
        'imageUrl': opts['imageUrl'],
        'author': opts['author'],
        'backgroundColor': opts['backgroundColor'],
        'fontColor': opts['fontColor'],
        'source': opts['source']
      };
      var authNames = ['apiKeyScheme'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = _CreateRecipeCard200Response["default"];
      return this.apiClient.callApi('/recipes/visualizeRecipe', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the equipmentByIDImage operation.
     * @callback module:api/RecipesApi~equipmentByIDImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Equipment by ID Image
     * Visualize a recipe's equipment list as an image.
     * @param {Number} id The recipe id.
     * @param {module:api/RecipesApi~equipmentByIDImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
  }, {
    key: "equipmentByIDImage",
    value: function equipmentByIDImage(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling equipmentByIDImage");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['image/png'];
      var returnType = File;
      return this.apiClient.callApi('/recipes/{id}/equipmentWidget.png', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the extractRecipeFromWebsite operation.
     * @callback module:api/RecipesApi~extractRecipeFromWebsiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecipeInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract Recipe from Website
     * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
     * @param {String} url The URL of the recipe page.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceExtraction] If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
     * @param {Boolean} [analyze] If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
     * @param {Boolean} [includeNutrition = false)] Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
     * @param {Boolean} [includeTaste = false)] Whether taste data should be added to correctly parsed ingredients.
     * @param {module:api/RecipesApi~extractRecipeFromWebsiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecipeInformation}
     */
  }, {
    key: "extractRecipeFromWebsite",
    value: function extractRecipeFromWebsite(url, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling extractRecipeFromWebsite");
      }
      var pathParams = {};
      var queryParams = {
        'url': url,
        'forceExtraction': opts['forceExtraction'],
        'analyze': opts['analyze'],
        'includeNutrition': opts['includeNutrition'],
        'includeTaste': opts['includeTaste']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _RecipeInformation["default"];
      return this.apiClient.callApi('/recipes/extract', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getAnalyzedRecipeInstructions operation.
     * @callback module:api/RecipesApi~getAnalyzedRecipeInstructionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetAnalyzedRecipeInstructions200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Analyzed Recipe Instructions
     * Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.
     * @param {Number} id The recipe id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [stepBreakdown] Whether to break down the recipe steps even more.
     * @param {module:api/RecipesApi~getAnalyzedRecipeInstructionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetAnalyzedRecipeInstructions200ResponseInner>}
     */
  }, {
    key: "getAnalyzedRecipeInstructions",
    value: function getAnalyzedRecipeInstructions(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnalyzedRecipeInstructions");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'stepBreakdown': opts['stepBreakdown']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_GetAnalyzedRecipeInstructions200ResponseInner["default"]];
      return this.apiClient.callApi('/recipes/{id}/analyzedInstructions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRandomRecipes operation.
     * @callback module:api/RecipesApi~getRandomRecipesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRandomRecipes200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Random Recipes
     * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeNutrition = false)] Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
     * @param {String} [includeTags] A comma-separated list of tags that the random recipe(s) must adhere to.
     * @param {String} [excludeTags] A comma-separated list of tags that the random recipe(s) must not adhere to.
     * @param {Number} [number = 10)] The maximum number of items to return (between 1 and 100). Defaults to 10.
     * @param {module:api/RecipesApi~getRandomRecipesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRandomRecipes200Response}
     */
  }, {
    key: "getRandomRecipes",
    value: function getRandomRecipes(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'includeNutrition': opts['includeNutrition'],
        'include-tags': opts['includeTags'],
        'exclude-tags': opts['excludeTags'],
        'number': opts['number']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetRandomRecipes200Response["default"];
      return this.apiClient.callApi('/recipes/random', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRecipeEquipmentByID operation.
     * @callback module:api/RecipesApi~getRecipeEquipmentByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecipeEquipmentByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Equipment by ID
     * Get a recipe's equipment list.
     * @param {Number} id The recipe id.
     * @param {module:api/RecipesApi~getRecipeEquipmentByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecipeEquipmentByID200Response}
     */
  }, {
    key: "getRecipeEquipmentByID",
    value: function getRecipeEquipmentByID(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecipeEquipmentByID");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetRecipeEquipmentByID200Response["default"];
      return this.apiClient.callApi('/recipes/{id}/equipmentWidget.json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRecipeInformation operation.
     * @callback module:api/RecipesApi~getRecipeInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecipeInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recipe Information
     * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
     * @param {Number} id The id of the recipe.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeNutrition = false)] Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
     * @param {Boolean} [addWinePairing] Add a wine pairing to the recipe.
     * @param {Boolean} [addTasteData] Add taste data to the recipe.
     * @param {module:api/RecipesApi~getRecipeInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecipeInformation}
     */
  }, {
    key: "getRecipeInformation",
    value: function getRecipeInformation(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecipeInformation");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'includeNutrition': opts['includeNutrition'],
        'addWinePairing': opts['addWinePairing'],
        'addTasteData': opts['addTasteData']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _RecipeInformation["default"];
      return this.apiClient.callApi('/recipes/{id}/information', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRecipeInformationBulk operation.
     * @callback module:api/RecipesApi~getRecipeInformationBulkCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecipeInformation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recipe Information Bulk
     * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
     * @param {String} ids A comma-separated list of recipe ids.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeNutrition = false)] Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
     * @param {module:api/RecipesApi~getRecipeInformationBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecipeInformation>}
     */
  }, {
    key: "getRecipeInformationBulk",
    value: function getRecipeInformationBulk(ids, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getRecipeInformationBulk");
      }
      var pathParams = {};
      var queryParams = {
        'ids': ids,
        'includeNutrition': opts['includeNutrition']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_RecipeInformation["default"]];
      return this.apiClient.callApi('/recipes/informationBulk', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRecipeIngredientsByID operation.
     * @callback module:api/RecipesApi~getRecipeIngredientsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecipeIngredientsByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ingredients by ID
     * Get a recipe's ingredient list.
     * @param {Number} id The recipe id.
     * @param {module:api/RecipesApi~getRecipeIngredientsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecipeIngredientsByID200Response}
     */
  }, {
    key: "getRecipeIngredientsByID",
    value: function getRecipeIngredientsByID(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecipeIngredientsByID");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetRecipeIngredientsByID200Response["default"];
      return this.apiClient.callApi('/recipes/{id}/ingredientWidget.json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRecipeNutritionWidgetByID operation.
     * @callback module:api/RecipesApi~getRecipeNutritionWidgetByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecipeNutritionWidgetByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Nutrition by ID
     * Get a recipe's nutrition data.
     * @param {Number} id The recipe id.
     * @param {module:api/RecipesApi~getRecipeNutritionWidgetByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecipeNutritionWidgetByID200Response}
     */
  }, {
    key: "getRecipeNutritionWidgetByID",
    value: function getRecipeNutritionWidgetByID(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecipeNutritionWidgetByID");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetRecipeNutritionWidgetByID200Response["default"];
      return this.apiClient.callApi('/recipes/{id}/nutritionWidget.json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRecipePriceBreakdownByID operation.
     * @callback module:api/RecipesApi~getRecipePriceBreakdownByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecipePriceBreakdownByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Price Breakdown by ID
     * Get a recipe's price breakdown data.
     * @param {Number} id The recipe id.
     * @param {module:api/RecipesApi~getRecipePriceBreakdownByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecipePriceBreakdownByID200Response}
     */
  }, {
    key: "getRecipePriceBreakdownByID",
    value: function getRecipePriceBreakdownByID(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecipePriceBreakdownByID");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetRecipePriceBreakdownByID200Response["default"];
      return this.apiClient.callApi('/recipes/{id}/priceBreakdownWidget.json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRecipeTasteByID operation.
     * @callback module:api/RecipesApi~getRecipeTasteByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TasteInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Taste by ID
     * Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param {Number} id The recipe id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [normalize = true)] Normalize to the strongest taste.
     * @param {module:api/RecipesApi~getRecipeTasteByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TasteInformation}
     */
  }, {
    key: "getRecipeTasteByID",
    value: function getRecipeTasteByID(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecipeTasteByID");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'normalize': opts['normalize']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _TasteInformation["default"];
      return this.apiClient.callApi('/recipes/{id}/tasteWidget.json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getSimilarRecipes operation.
     * @callback module:api/RecipesApi~getSimilarRecipesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetSimilarRecipes200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Similar Recipes
     * Find recipes which are similar to the given one.
     * @param {Number} id The id of the source recipe for which similar recipes should be found.
     * @param {Object} opts Optional parameters
     * @param {Number} [number = 10)] The maximum number of items to return (between 1 and 100). Defaults to 10.
     * @param {module:api/RecipesApi~getSimilarRecipesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetSimilarRecipes200ResponseInner>}
     */
  }, {
    key: "getSimilarRecipes",
    value: function getSimilarRecipes(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSimilarRecipes");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'number': opts['number']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_GetSimilarRecipes200ResponseInner["default"]];
      return this.apiClient.callApi('/recipes/{id}/similar', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the guessNutritionByDishName operation.
     * @callback module:api/RecipesApi~guessNutritionByDishNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GuessNutritionByDishName200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Guess Nutrition by Dish Name
     * Estimate the macronutrients of a dish based on its title.
     * @param {String} title The title of the dish.
     * @param {module:api/RecipesApi~guessNutritionByDishNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GuessNutritionByDishName200Response}
     */
  }, {
    key: "guessNutritionByDishName",
    value: function guessNutritionByDishName(title, callback) {
      var postBody = null;
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling guessNutritionByDishName");
      }
      var pathParams = {};
      var queryParams = {
        'title': title
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GuessNutritionByDishName200Response["default"];
      return this.apiClient.callApi('/recipes/guessNutrition', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the parseIngredients operation.
     * @callback module:api/RecipesApi~parseIngredientsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IngredientInformation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parse Ingredients
     * Extract an ingredient from plain text.
     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param {Number} servings The number of servings that you can make from the ingredients.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [language] The language of the input. Either 'en' or 'de'.
     * @param {Boolean} [includeNutrition] Whether nutrition data should be added to correctly parsed ingredients.
     * @param {module:api/RecipesApi~parseIngredientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IngredientInformation>}
     */
  }, {
    key: "parseIngredients",
    value: function parseIngredients(ingredientList, servings, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'ingredientList' is set
      if (ingredientList === undefined || ingredientList === null) {
        throw new Error("Missing the required parameter 'ingredientList' when calling parseIngredients");
      }
      // verify the required parameter 'servings' is set
      if (servings === undefined || servings === null) {
        throw new Error("Missing the required parameter 'servings' when calling parseIngredients");
      }
      var pathParams = {};
      var queryParams = {
        'language': opts['language']
      };
      var headerParams = {};
      var formParams = {
        'ingredientList': ingredientList,
        'servings': servings,
        'includeNutrition': opts['includeNutrition']
      };
      var authNames = ['apiKeyScheme'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = [_IngredientInformation["default"]];
      return this.apiClient.callApi('/recipes/parseIngredients', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the priceBreakdownByIDImage operation.
     * @callback module:api/RecipesApi~priceBreakdownByIDImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Price Breakdown by ID Image
     * Visualize a recipe's price breakdown.
     * @param {Number} id The recipe id.
     * @param {module:api/RecipesApi~priceBreakdownByIDImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
  }, {
    key: "priceBreakdownByIDImage",
    value: function priceBreakdownByIDImage(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling priceBreakdownByIDImage");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['image/png'];
      var returnType = File;
      return this.apiClient.callApi('/recipes/{id}/priceBreakdownWidget.png', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the quickAnswer operation.
     * @callback module:api/RecipesApi~quickAnswerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuickAnswer200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Quick Answer
     * Answer a nutrition related natural language question.
     * @param {String} q The nutrition related question.
     * @param {module:api/RecipesApi~quickAnswerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuickAnswer200Response}
     */
  }, {
    key: "quickAnswer",
    value: function quickAnswer(q, callback) {
      var postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling quickAnswer");
      }
      var pathParams = {};
      var queryParams = {
        'q': q
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _QuickAnswer200Response["default"];
      return this.apiClient.callApi('/recipes/quickAnswer', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the recipeNutritionByIDImage operation.
     * @callback module:api/RecipesApi~recipeNutritionByIDImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recipe Nutrition by ID Image
     * Visualize a recipe's nutritional information as an image.
     * @param {Number} id The recipe id.
     * @param {module:api/RecipesApi~recipeNutritionByIDImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
  }, {
    key: "recipeNutritionByIDImage",
    value: function recipeNutritionByIDImage(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recipeNutritionByIDImage");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['image/png'];
      var returnType = File;
      return this.apiClient.callApi('/recipes/{id}/nutritionWidget.png', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the recipeNutritionLabelImage operation.
     * @callback module:api/RecipesApi~recipeNutritionLabelImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recipe Nutrition Label Image
     * Get a recipe's nutrition label as an image.
     * @param {Number} id The recipe id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [showOptionalNutrients] Whether to show optional nutrients.
     * @param {Boolean} [showZeroValues] Whether to show zero values.
     * @param {Boolean} [showIngredients] Whether to show a list of ingredients.
     * @param {module:api/RecipesApi~recipeNutritionLabelImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
  }, {
    key: "recipeNutritionLabelImage",
    value: function recipeNutritionLabelImage(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recipeNutritionLabelImage");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'showOptionalNutrients': opts['showOptionalNutrients'],
        'showZeroValues': opts['showZeroValues'],
        'showIngredients': opts['showIngredients']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['image/png'];
      var returnType = File;
      return this.apiClient.callApi('/recipes/{id}/nutritionLabel.png', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the recipeNutritionLabelWidget operation.
     * @callback module:api/RecipesApi~recipeNutritionLabelWidgetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recipe Nutrition Label Widget
     * Get a recipe's nutrition label as an HTML widget.
     * @param {Number} id The recipe id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [defaultCss = true)] Whether the default CSS should be added to the response.
     * @param {Boolean} [showOptionalNutrients] Whether to show optional nutrients.
     * @param {Boolean} [showZeroValues] Whether to show zero values.
     * @param {Boolean} [showIngredients] Whether to show a list of ingredients.
     * @param {module:api/RecipesApi~recipeNutritionLabelWidgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
  }, {
    key: "recipeNutritionLabelWidget",
    value: function recipeNutritionLabelWidget(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recipeNutritionLabelWidget");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'defaultCss': opts['defaultCss'],
        'showOptionalNutrients': opts['showOptionalNutrients'],
        'showZeroValues': opts['showZeroValues'],
        'showIngredients': opts['showIngredients']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/{id}/nutritionLabel', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the recipeTasteByIDImage operation.
     * @callback module:api/RecipesApi~recipeTasteByIDImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recipe Taste by ID Image
     * Get a recipe's taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param {Number} id The recipe id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [normalize] Normalize to the strongest taste.
     * @param {String} [rgb] Red, green, blue values for the chart color.
     * @param {module:api/RecipesApi~recipeTasteByIDImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
  }, {
    key: "recipeTasteByIDImage",
    value: function recipeTasteByIDImage(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recipeTasteByIDImage");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'normalize': opts['normalize'],
        'rgb': opts['rgb']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['image/png'];
      var returnType = File;
      return this.apiClient.callApi('/recipes/{id}/tasteWidget.png', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the searchRecipes operation.
     * @callback module:api/RecipesApi~searchRecipesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchRecipes200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Recipes
     * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
     * @param {String} query The (natural language) search query.
     * @param {Object} opts Optional parameters
     * @param {String} [cuisine] The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.
     * @param {String} [excludeCuisine] The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.
     * @param {String} [diet] The diet for which the recipes must be suitable. See a full list of supported diets.
     * @param {String} [intolerances] A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
     * @param {String} [equipment] The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".
     * @param {String} [includeIngredients] A comma-separated list of ingredients that should/must be used in the recipes.
     * @param {String} [excludeIngredients] A comma-separated list of ingredients or ingredient types that the recipes must not contain.
     * @param {String} [type] The type of recipe. See a full list of supported meal types.
     * @param {Boolean} [instructionsRequired] Whether the recipes must have instructions.
     * @param {Boolean} [fillIngredients] Add information about the ingredients and whether they are used or missing in relation to the query.
     * @param {Boolean} [addRecipeInformation] If set to true, you get more information about the recipes returned.
     * @param {Boolean} [addRecipeNutrition] If set to true, you get nutritional information about each recipes returned.
     * @param {String} [author] The username of the recipe author.
     * @param {String} [tags] The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
     * @param {Number} [recipeBoxId] The id of the recipe box to which the search should be limited to.
     * @param {String} [titleMatch] Enter text that must be found in the title of the recipes.
     * @param {Number} [maxReadyTime] The maximum time in minutes it should take to prepare and cook the recipe.
     * @param {Number} [minServings] The minimum amount of servings the recipe is for.
     * @param {Number} [maxServings] The maximum amount of servings the recipe is for.
     * @param {Boolean} [ignorePantry = false)] Whether to ignore typical pantry items, such as water, salt, flour, etc.
     * @param {String} [sort] The strategy to sort recipes by. See a full list of supported sorting options.
     * @param {String} [sortDirection] The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
     * @param {Number} [minCarbs] The minimum amount of carbohydrates in grams the recipe must have.
     * @param {Number} [maxCarbs] The maximum amount of carbohydrates in grams the recipe can have.
     * @param {Number} [minProtein] The minimum amount of protein in grams the recipe must have.
     * @param {Number} [maxProtein] The maximum amount of protein in grams the recipe can have.
     * @param {Number} [minCalories] The minimum amount of calories the recipe must have.
     * @param {Number} [maxCalories] The maximum amount of calories the recipe can have.
     * @param {Number} [minFat] The minimum amount of fat in grams the recipe must have.
     * @param {Number} [maxFat] The maximum amount of fat in grams the recipe can have.
     * @param {Number} [minAlcohol] The minimum amount of alcohol in grams the recipe must have.
     * @param {Number} [maxAlcohol] The maximum amount of alcohol in grams the recipe can have.
     * @param {Number} [minCaffeine] The minimum amount of caffeine in milligrams the recipe must have.
     * @param {Number} [maxCaffeine] The maximum amount of caffeine in milligrams the recipe can have.
     * @param {Number} [minCopper] The minimum amount of copper in milligrams the recipe must have.
     * @param {Number} [maxCopper] The maximum amount of copper in milligrams the recipe can have.
     * @param {Number} [minCalcium] The minimum amount of calcium in milligrams the recipe must have.
     * @param {Number} [maxCalcium] The maximum amount of calcium in milligrams the recipe can have.
     * @param {Number} [minCholine] The minimum amount of choline in milligrams the recipe must have.
     * @param {Number} [maxCholine] The maximum amount of choline in milligrams the recipe can have.
     * @param {Number} [minCholesterol] The minimum amount of cholesterol in milligrams the recipe must have.
     * @param {Number} [maxCholesterol] The maximum amount of cholesterol in milligrams the recipe can have.
     * @param {Number} [minFluoride] The minimum amount of fluoride in milligrams the recipe must have.
     * @param {Number} [maxFluoride] The maximum amount of fluoride in milligrams the recipe can have.
     * @param {Number} [minSaturatedFat] The minimum amount of saturated fat in grams the recipe must have.
     * @param {Number} [maxSaturatedFat] The maximum amount of saturated fat in grams the recipe can have.
     * @param {Number} [minVitaminA] The minimum amount of Vitamin A in IU the recipe must have.
     * @param {Number} [maxVitaminA] The maximum amount of Vitamin A in IU the recipe can have.
     * @param {Number} [minVitaminC] The minimum amount of Vitamin C milligrams the recipe must have.
     * @param {Number} [maxVitaminC] The maximum amount of Vitamin C in milligrams the recipe can have.
     * @param {Number} [minVitaminD] The minimum amount of Vitamin D in micrograms the recipe must have.
     * @param {Number} [maxVitaminD] The maximum amount of Vitamin D in micrograms the recipe can have.
     * @param {Number} [minVitaminE] The minimum amount of Vitamin E in milligrams the recipe must have.
     * @param {Number} [maxVitaminE] The maximum amount of Vitamin E in milligrams the recipe can have.
     * @param {Number} [minVitaminK] The minimum amount of Vitamin K in micrograms the recipe must have.
     * @param {Number} [maxVitaminK] The maximum amount of Vitamin K in micrograms the recipe can have.
     * @param {Number} [minVitaminB1] The minimum amount of Vitamin B1 in milligrams the recipe must have.
     * @param {Number} [maxVitaminB1] The maximum amount of Vitamin B1 in milligrams the recipe can have.
     * @param {Number} [minVitaminB2] The minimum amount of Vitamin B2 in milligrams the recipe must have.
     * @param {Number} [maxVitaminB2] The maximum amount of Vitamin B2 in milligrams the recipe can have.
     * @param {Number} [minVitaminB5] The minimum amount of Vitamin B5 in milligrams the recipe must have.
     * @param {Number} [maxVitaminB5] The maximum amount of Vitamin B5 in milligrams the recipe can have.
     * @param {Number} [minVitaminB3] The minimum amount of Vitamin B3 in milligrams the recipe must have.
     * @param {Number} [maxVitaminB3] The maximum amount of Vitamin B3 in milligrams the recipe can have.
     * @param {Number} [minVitaminB6] The minimum amount of Vitamin B6 in milligrams the recipe must have.
     * @param {Number} [maxVitaminB6] The maximum amount of Vitamin B6 in milligrams the recipe can have.
     * @param {Number} [minVitaminB12] The minimum amount of Vitamin B12 in micrograms the recipe must have.
     * @param {Number} [maxVitaminB12] The maximum amount of Vitamin B12 in micrograms the recipe can have.
     * @param {Number} [minFiber] The minimum amount of fiber in grams the recipe must have.
     * @param {Number} [maxFiber] The maximum amount of fiber in grams the recipe can have.
     * @param {Number} [minFolate] The minimum amount of folate in micrograms the recipe must have.
     * @param {Number} [maxFolate] The maximum amount of folate in micrograms the recipe can have.
     * @param {Number} [minFolicAcid] The minimum amount of folic acid in micrograms the recipe must have.
     * @param {Number} [maxFolicAcid] The maximum amount of folic acid in micrograms the recipe can have.
     * @param {Number} [minIodine] The minimum amount of iodine in micrograms the recipe must have.
     * @param {Number} [maxIodine] The maximum amount of iodine in micrograms the recipe can have.
     * @param {Number} [minIron] The minimum amount of iron in milligrams the recipe must have.
     * @param {Number} [maxIron] The maximum amount of iron in milligrams the recipe can have.
     * @param {Number} [minMagnesium] The minimum amount of magnesium in milligrams the recipe must have.
     * @param {Number} [maxMagnesium] The maximum amount of magnesium in milligrams the recipe can have.
     * @param {Number} [minManganese] The minimum amount of manganese in milligrams the recipe must have.
     * @param {Number} [maxManganese] The maximum amount of manganese in milligrams the recipe can have.
     * @param {Number} [minPhosphorus] The minimum amount of phosphorus in milligrams the recipe must have.
     * @param {Number} [maxPhosphorus] The maximum amount of phosphorus in milligrams the recipe can have.
     * @param {Number} [minPotassium] The minimum amount of potassium in milligrams the recipe must have.
     * @param {Number} [maxPotassium] The maximum amount of potassium in milligrams the recipe can have.
     * @param {Number} [minSelenium] The minimum amount of selenium in micrograms the recipe must have.
     * @param {Number} [maxSelenium] The maximum amount of selenium in micrograms the recipe can have.
     * @param {Number} [minSodium] The minimum amount of sodium in milligrams the recipe must have.
     * @param {Number} [maxSodium] The maximum amount of sodium in milligrams the recipe can have.
     * @param {Number} [minSugar] The minimum amount of sugar in grams the recipe must have.
     * @param {Number} [maxSugar] The maximum amount of sugar in grams the recipe can have.
     * @param {Number} [minZinc] The minimum amount of zinc in milligrams the recipe must have.
     * @param {Number} [maxZinc] The maximum amount of zinc in milligrams the recipe can have.
     * @param {Number} [offset] The number of results to skip (between 0 and 900).
     * @param {Number} [number = 10)] The maximum number of items to return (between 1 and 100). Defaults to 10.
     * @param {module:api/RecipesApi~searchRecipesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchRecipes200Response}
     */
  }, {
    key: "searchRecipes",
    value: function searchRecipes(query, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchRecipes");
      }
      var pathParams = {};
      var queryParams = {
        'query': query,
        'cuisine': opts['cuisine'],
        'excludeCuisine': opts['excludeCuisine'],
        'diet': opts['diet'],
        'intolerances': opts['intolerances'],
        'equipment': opts['equipment'],
        'includeIngredients': opts['includeIngredients'],
        'excludeIngredients': opts['excludeIngredients'],
        'type': opts['type'],
        'instructionsRequired': opts['instructionsRequired'],
        'fillIngredients': opts['fillIngredients'],
        'addRecipeInformation': opts['addRecipeInformation'],
        'addRecipeNutrition': opts['addRecipeNutrition'],
        'author': opts['author'],
        'tags': opts['tags'],
        'recipeBoxId': opts['recipeBoxId'],
        'titleMatch': opts['titleMatch'],
        'maxReadyTime': opts['maxReadyTime'],
        'minServings': opts['minServings'],
        'maxServings': opts['maxServings'],
        'ignorePantry': opts['ignorePantry'],
        'sort': opts['sort'],
        'sortDirection': opts['sortDirection'],
        'minCarbs': opts['minCarbs'],
        'maxCarbs': opts['maxCarbs'],
        'minProtein': opts['minProtein'],
        'maxProtein': opts['maxProtein'],
        'minCalories': opts['minCalories'],
        'maxCalories': opts['maxCalories'],
        'minFat': opts['minFat'],
        'maxFat': opts['maxFat'],
        'minAlcohol': opts['minAlcohol'],
        'maxAlcohol': opts['maxAlcohol'],
        'minCaffeine': opts['minCaffeine'],
        'maxCaffeine': opts['maxCaffeine'],
        'minCopper': opts['minCopper'],
        'maxCopper': opts['maxCopper'],
        'minCalcium': opts['minCalcium'],
        'maxCalcium': opts['maxCalcium'],
        'minCholine': opts['minCholine'],
        'maxCholine': opts['maxCholine'],
        'minCholesterol': opts['minCholesterol'],
        'maxCholesterol': opts['maxCholesterol'],
        'minFluoride': opts['minFluoride'],
        'maxFluoride': opts['maxFluoride'],
        'minSaturatedFat': opts['minSaturatedFat'],
        'maxSaturatedFat': opts['maxSaturatedFat'],
        'minVitaminA': opts['minVitaminA'],
        'maxVitaminA': opts['maxVitaminA'],
        'minVitaminC': opts['minVitaminC'],
        'maxVitaminC': opts['maxVitaminC'],
        'minVitaminD': opts['minVitaminD'],
        'maxVitaminD': opts['maxVitaminD'],
        'minVitaminE': opts['minVitaminE'],
        'maxVitaminE': opts['maxVitaminE'],
        'minVitaminK': opts['minVitaminK'],
        'maxVitaminK': opts['maxVitaminK'],
        'minVitaminB1': opts['minVitaminB1'],
        'maxVitaminB1': opts['maxVitaminB1'],
        'minVitaminB2': opts['minVitaminB2'],
        'maxVitaminB2': opts['maxVitaminB2'],
        'minVitaminB5': opts['minVitaminB5'],
        'maxVitaminB5': opts['maxVitaminB5'],
        'minVitaminB3': opts['minVitaminB3'],
        'maxVitaminB3': opts['maxVitaminB3'],
        'minVitaminB6': opts['minVitaminB6'],
        'maxVitaminB6': opts['maxVitaminB6'],
        'minVitaminB12': opts['minVitaminB12'],
        'maxVitaminB12': opts['maxVitaminB12'],
        'minFiber': opts['minFiber'],
        'maxFiber': opts['maxFiber'],
        'minFolate': opts['minFolate'],
        'maxFolate': opts['maxFolate'],
        'minFolicAcid': opts['minFolicAcid'],
        'maxFolicAcid': opts['maxFolicAcid'],
        'minIodine': opts['minIodine'],
        'maxIodine': opts['maxIodine'],
        'minIron': opts['minIron'],
        'maxIron': opts['maxIron'],
        'minMagnesium': opts['minMagnesium'],
        'maxMagnesium': opts['maxMagnesium'],
        'minManganese': opts['minManganese'],
        'maxManganese': opts['maxManganese'],
        'minPhosphorus': opts['minPhosphorus'],
        'maxPhosphorus': opts['maxPhosphorus'],
        'minPotassium': opts['minPotassium'],
        'maxPotassium': opts['maxPotassium'],
        'minSelenium': opts['minSelenium'],
        'maxSelenium': opts['maxSelenium'],
        'minSodium': opts['minSodium'],
        'maxSodium': opts['maxSodium'],
        'minSugar': opts['minSugar'],
        'maxSugar': opts['maxSugar'],
        'minZinc': opts['minZinc'],
        'maxZinc': opts['maxZinc'],
        'offset': opts['offset'],
        'number': opts['number']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SearchRecipes200Response["default"];
      return this.apiClient.callApi('/recipes/complexSearch', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the searchRecipesByIngredients operation.
     * @callback module:api/RecipesApi~searchRecipesByIngredientsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SearchRecipesByIngredients200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Recipes by Ingredients
     *  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).         
     * @param {String} ingredients A comma-separated list of ingredients that the recipes should contain.
     * @param {Object} opts Optional parameters
     * @param {Number} [number = 10)] The maximum number of items to return (between 1 and 100). Defaults to 10.
     * @param {Number} [ranking] Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
     * @param {Boolean} [ignorePantry = false)] Whether to ignore typical pantry items, such as water, salt, flour, etc.
     * @param {module:api/RecipesApi~searchRecipesByIngredientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SearchRecipesByIngredients200ResponseInner>}
     */
  }, {
    key: "searchRecipesByIngredients",
    value: function searchRecipesByIngredients(ingredients, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'ingredients' is set
      if (ingredients === undefined || ingredients === null) {
        throw new Error("Missing the required parameter 'ingredients' when calling searchRecipesByIngredients");
      }
      var pathParams = {};
      var queryParams = {
        'ingredients': ingredients,
        'number': opts['number'],
        'ranking': opts['ranking'],
        'ignorePantry': opts['ignorePantry']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_SearchRecipesByIngredients200ResponseInner["default"]];
      return this.apiClient.callApi('/recipes/findByIngredients', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the searchRecipesByNutrients operation.
     * @callback module:api/RecipesApi~searchRecipesByNutrientsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SearchRecipesByNutrients200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Recipes by Nutrients
     * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
     * @param {Object} opts Optional parameters
     * @param {Number} [minCarbs] The minimum amount of carbohydrates in grams the recipe must have.
     * @param {Number} [maxCarbs] The maximum amount of carbohydrates in grams the recipe can have.
     * @param {Number} [minProtein] The minimum amount of protein in grams the recipe must have.
     * @param {Number} [maxProtein] The maximum amount of protein in grams the recipe can have.
     * @param {Number} [minCalories] The minimum amount of calories the recipe must have.
     * @param {Number} [maxCalories] The maximum amount of calories the recipe can have.
     * @param {Number} [minFat] The minimum amount of fat in grams the recipe must have.
     * @param {Number} [maxFat] The maximum amount of fat in grams the recipe can have.
     * @param {Number} [minAlcohol] The minimum amount of alcohol in grams the recipe must have.
     * @param {Number} [maxAlcohol] The maximum amount of alcohol in grams the recipe can have.
     * @param {Number} [minCaffeine] The minimum amount of caffeine in milligrams the recipe must have.
     * @param {Number} [maxCaffeine] The maximum amount of caffeine in milligrams the recipe can have.
     * @param {Number} [minCopper] The minimum amount of copper in milligrams the recipe must have.
     * @param {Number} [maxCopper] The maximum amount of copper in milligrams the recipe can have.
     * @param {Number} [minCalcium] The minimum amount of calcium in milligrams the recipe must have.
     * @param {Number} [maxCalcium] The maximum amount of calcium in milligrams the recipe can have.
     * @param {Number} [minCholine] The minimum amount of choline in milligrams the recipe must have.
     * @param {Number} [maxCholine] The maximum amount of choline in milligrams the recipe can have.
     * @param {Number} [minCholesterol] The minimum amount of cholesterol in milligrams the recipe must have.
     * @param {Number} [maxCholesterol] The maximum amount of cholesterol in milligrams the recipe can have.
     * @param {Number} [minFluoride] The minimum amount of fluoride in milligrams the recipe must have.
     * @param {Number} [maxFluoride] The maximum amount of fluoride in milligrams the recipe can have.
     * @param {Number} [minSaturatedFat] The minimum amount of saturated fat in grams the recipe must have.
     * @param {Number} [maxSaturatedFat] The maximum amount of saturated fat in grams the recipe can have.
     * @param {Number} [minVitaminA] The minimum amount of Vitamin A in IU the recipe must have.
     * @param {Number} [maxVitaminA] The maximum amount of Vitamin A in IU the recipe can have.
     * @param {Number} [minVitaminC] The minimum amount of Vitamin C in milligrams the recipe must have.
     * @param {Number} [maxVitaminC] The maximum amount of Vitamin C in milligrams the recipe can have.
     * @param {Number} [minVitaminD] The minimum amount of Vitamin D in micrograms the recipe must have.
     * @param {Number} [maxVitaminD] The maximum amount of Vitamin D in micrograms the recipe can have.
     * @param {Number} [minVitaminE] The minimum amount of Vitamin E in milligrams the recipe must have.
     * @param {Number} [maxVitaminE] The maximum amount of Vitamin E in milligrams the recipe can have.
     * @param {Number} [minVitaminK] The minimum amount of Vitamin K in micrograms the recipe must have.
     * @param {Number} [maxVitaminK] The maximum amount of Vitamin K in micrograms the recipe can have.
     * @param {Number} [minVitaminB1] The minimum amount of Vitamin B1 in milligrams the recipe must have.
     * @param {Number} [maxVitaminB1] The maximum amount of Vitamin B1 in milligrams the recipe can have.
     * @param {Number} [minVitaminB2] The minimum amount of Vitamin B2 in milligrams the recipe must have.
     * @param {Number} [maxVitaminB2] The maximum amount of Vitamin B2 in milligrams the recipe can have.
     * @param {Number} [minVitaminB5] The minimum amount of Vitamin B5 in milligrams the recipe must have.
     * @param {Number} [maxVitaminB5] The maximum amount of Vitamin B5 in milligrams the recipe can have.
     * @param {Number} [minVitaminB3] The minimum amount of Vitamin B3 in milligrams the recipe must have.
     * @param {Number} [maxVitaminB3] The maximum amount of Vitamin B3 in milligrams the recipe can have.
     * @param {Number} [minVitaminB6] The minimum amount of Vitamin B6 in milligrams the recipe must have.
     * @param {Number} [maxVitaminB6] The maximum amount of Vitamin B6 in milligrams the recipe can have.
     * @param {Number} [minVitaminB12] The minimum amount of Vitamin B12 in micrograms the recipe must have.
     * @param {Number} [maxVitaminB12] The maximum amount of Vitamin B12 in micrograms the recipe can have.
     * @param {Number} [minFiber] The minimum amount of fiber in grams the recipe must have.
     * @param {Number} [maxFiber] The maximum amount of fiber in grams the recipe can have.
     * @param {Number} [minFolate] The minimum amount of folate in micrograms the recipe must have.
     * @param {Number} [maxFolate] The maximum amount of folate in micrograms the recipe can have.
     * @param {Number} [minFolicAcid] The minimum amount of folic acid in micrograms the recipe must have.
     * @param {Number} [maxFolicAcid] The maximum amount of folic acid in micrograms the recipe can have.
     * @param {Number} [minIodine] The minimum amount of iodine in micrograms the recipe must have.
     * @param {Number} [maxIodine] The maximum amount of iodine in micrograms the recipe can have.
     * @param {Number} [minIron] The minimum amount of iron in milligrams the recipe must have.
     * @param {Number} [maxIron] The maximum amount of iron in milligrams the recipe can have.
     * @param {Number} [minMagnesium] The minimum amount of magnesium in milligrams the recipe must have.
     * @param {Number} [maxMagnesium] The maximum amount of magnesium in milligrams the recipe can have.
     * @param {Number} [minManganese] The minimum amount of manganese in milligrams the recipe must have.
     * @param {Number} [maxManganese] The maximum amount of manganese in milligrams the recipe can have.
     * @param {Number} [minPhosphorus] The minimum amount of phosphorus in milligrams the recipe must have.
     * @param {Number} [maxPhosphorus] The maximum amount of phosphorus in milligrams the recipe can have.
     * @param {Number} [minPotassium] The minimum amount of potassium in milligrams the recipe must have.
     * @param {Number} [maxPotassium] The maximum amount of potassium in milligrams the recipe can have.
     * @param {Number} [minSelenium] The minimum amount of selenium in micrograms the recipe must have.
     * @param {Number} [maxSelenium] The maximum amount of selenium in micrograms the recipe can have.
     * @param {Number} [minSodium] The minimum amount of sodium in milligrams the recipe must have.
     * @param {Number} [maxSodium] The maximum amount of sodium in milligrams the recipe can have.
     * @param {Number} [minSugar] The minimum amount of sugar in grams the recipe must have.
     * @param {Number} [maxSugar] The maximum amount of sugar in grams the recipe can have.
     * @param {Number} [minZinc] The minimum amount of zinc in milligrams the recipe must have.
     * @param {Number} [maxZinc] The maximum amount of zinc in milligrams the recipe can have.
     * @param {Number} [offset] The number of results to skip (between 0 and 900).
     * @param {Number} [number = 10)] The maximum number of items to return (between 1 and 100). Defaults to 10.
     * @param {Boolean} [random] If true, every request will give you a random set of recipes within the requested limits.
     * @param {module:api/RecipesApi~searchRecipesByNutrientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SearchRecipesByNutrients200ResponseInner>}
     */
  }, {
    key: "searchRecipesByNutrients",
    value: function searchRecipesByNutrients(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'minCarbs': opts['minCarbs'],
        'maxCarbs': opts['maxCarbs'],
        'minProtein': opts['minProtein'],
        'maxProtein': opts['maxProtein'],
        'minCalories': opts['minCalories'],
        'maxCalories': opts['maxCalories'],
        'minFat': opts['minFat'],
        'maxFat': opts['maxFat'],
        'minAlcohol': opts['minAlcohol'],
        'maxAlcohol': opts['maxAlcohol'],
        'minCaffeine': opts['minCaffeine'],
        'maxCaffeine': opts['maxCaffeine'],
        'minCopper': opts['minCopper'],
        'maxCopper': opts['maxCopper'],
        'minCalcium': opts['minCalcium'],
        'maxCalcium': opts['maxCalcium'],
        'minCholine': opts['minCholine'],
        'maxCholine': opts['maxCholine'],
        'minCholesterol': opts['minCholesterol'],
        'maxCholesterol': opts['maxCholesterol'],
        'minFluoride': opts['minFluoride'],
        'maxFluoride': opts['maxFluoride'],
        'minSaturatedFat': opts['minSaturatedFat'],
        'maxSaturatedFat': opts['maxSaturatedFat'],
        'minVitaminA': opts['minVitaminA'],
        'maxVitaminA': opts['maxVitaminA'],
        'minVitaminC': opts['minVitaminC'],
        'maxVitaminC': opts['maxVitaminC'],
        'minVitaminD': opts['minVitaminD'],
        'maxVitaminD': opts['maxVitaminD'],
        'minVitaminE': opts['minVitaminE'],
        'maxVitaminE': opts['maxVitaminE'],
        'minVitaminK': opts['minVitaminK'],
        'maxVitaminK': opts['maxVitaminK'],
        'minVitaminB1': opts['minVitaminB1'],
        'maxVitaminB1': opts['maxVitaminB1'],
        'minVitaminB2': opts['minVitaminB2'],
        'maxVitaminB2': opts['maxVitaminB2'],
        'minVitaminB5': opts['minVitaminB5'],
        'maxVitaminB5': opts['maxVitaminB5'],
        'minVitaminB3': opts['minVitaminB3'],
        'maxVitaminB3': opts['maxVitaminB3'],
        'minVitaminB6': opts['minVitaminB6'],
        'maxVitaminB6': opts['maxVitaminB6'],
        'minVitaminB12': opts['minVitaminB12'],
        'maxVitaminB12': opts['maxVitaminB12'],
        'minFiber': opts['minFiber'],
        'maxFiber': opts['maxFiber'],
        'minFolate': opts['minFolate'],
        'maxFolate': opts['maxFolate'],
        'minFolicAcid': opts['minFolicAcid'],
        'maxFolicAcid': opts['maxFolicAcid'],
        'minIodine': opts['minIodine'],
        'maxIodine': opts['maxIodine'],
        'minIron': opts['minIron'],
        'maxIron': opts['maxIron'],
        'minMagnesium': opts['minMagnesium'],
        'maxMagnesium': opts['maxMagnesium'],
        'minManganese': opts['minManganese'],
        'maxManganese': opts['maxManganese'],
        'minPhosphorus': opts['minPhosphorus'],
        'maxPhosphorus': opts['maxPhosphorus'],
        'minPotassium': opts['minPotassium'],
        'maxPotassium': opts['maxPotassium'],
        'minSelenium': opts['minSelenium'],
        'maxSelenium': opts['maxSelenium'],
        'minSodium': opts['minSodium'],
        'maxSodium': opts['maxSodium'],
        'minSugar': opts['minSugar'],
        'maxSugar': opts['maxSugar'],
        'minZinc': opts['minZinc'],
        'maxZinc': opts['maxZinc'],
        'offset': opts['offset'],
        'number': opts['number'],
        'random': opts['random']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_SearchRecipesByNutrients200ResponseInner["default"]];
      return this.apiClient.callApi('/recipes/findByNutrients', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the summarizeRecipe operation.
     * @callback module:api/RecipesApi~summarizeRecipeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SummarizeRecipe200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summarize Recipe
     * Automatically generate a short description that summarizes key information about the recipe.
     * @param {Number} id The recipe id.
     * @param {module:api/RecipesApi~summarizeRecipeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SummarizeRecipe200Response}
     */
  }, {
    key: "summarizeRecipe",
    value: function summarizeRecipe(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling summarizeRecipe");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SummarizeRecipe200Response["default"];
      return this.apiClient.callApi('/recipes/{id}/summary', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeEquipment operation.
     * @callback module:api/RecipesApi~visualizeEquipmentCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Equipment Widget
     * Visualize the equipment used to make a recipe.
     * @param {String} instructions The recipe's instructions.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [view] How to visualize the ingredients, either 'grid' or 'list'.
     * @param {Boolean} [defaultCss] Whether the default CSS should be added to the response.
     * @param {Boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
     * @param {module:api/RecipesApi~visualizeEquipmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
  }, {
    key: "visualizeEquipment",
    value: function visualizeEquipment(instructions, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'instructions' is set
      if (instructions === undefined || instructions === null) {
        throw new Error("Missing the required parameter 'instructions' when calling visualizeEquipment");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'instructions': instructions,
        'view': opts['view'],
        'defaultCss': opts['defaultCss'],
        'showBacklink': opts['showBacklink']
      };
      var authNames = ['apiKeyScheme'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/visualizeEquipment', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizePriceBreakdown operation.
     * @callback module:api/RecipesApi~visualizePriceBreakdownCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Price Breakdown Widget
     * Visualize the price breakdown of a recipe.
     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param {Number} servings The number of servings.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [language] The language of the input. Either 'en' or 'de'.
     * @param {Number} [mode] The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).
     * @param {Boolean} [defaultCss] Whether the default CSS should be added to the response.
     * @param {Boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
     * @param {module:api/RecipesApi~visualizePriceBreakdownCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
  }, {
    key: "visualizePriceBreakdown",
    value: function visualizePriceBreakdown(ingredientList, servings, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'ingredientList' is set
      if (ingredientList === undefined || ingredientList === null) {
        throw new Error("Missing the required parameter 'ingredientList' when calling visualizePriceBreakdown");
      }
      // verify the required parameter 'servings' is set
      if (servings === undefined || servings === null) {
        throw new Error("Missing the required parameter 'servings' when calling visualizePriceBreakdown");
      }
      var pathParams = {};
      var queryParams = {
        'language': opts['language']
      };
      var headerParams = {};
      var formParams = {
        'ingredientList': ingredientList,
        'servings': servings,
        'mode': opts['mode'],
        'defaultCss': opts['defaultCss'],
        'showBacklink': opts['showBacklink']
      };
      var authNames = ['apiKeyScheme'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/visualizePriceEstimator', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeRecipeEquipmentByID operation.
     * @callback module:api/RecipesApi~visualizeRecipeEquipmentByIDCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Equipment by ID Widget
     * Visualize a recipe's equipment list.
     * @param {Number} id The recipe id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [defaultCss = true)] Whether the default CSS should be added to the response.
     * @param {module:api/RecipesApi~visualizeRecipeEquipmentByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
  }, {
    key: "visualizeRecipeEquipmentByID",
    value: function visualizeRecipeEquipmentByID(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling visualizeRecipeEquipmentByID");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'defaultCss': opts['defaultCss']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/{id}/equipmentWidget', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeRecipeIngredientsByID operation.
     * @callback module:api/RecipesApi~visualizeRecipeIngredientsByIDCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ingredients by ID Widget
     * Visualize a recipe's ingredient list.
     * @param {Number} id The recipe id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [defaultCss = true)] Whether the default CSS should be added to the response.
     * @param {module:model/String} [measure] Whether the the measures should be 'us' or 'metric'.
     * @param {module:api/RecipesApi~visualizeRecipeIngredientsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
  }, {
    key: "visualizeRecipeIngredientsByID",
    value: function visualizeRecipeIngredientsByID(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling visualizeRecipeIngredientsByID");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'defaultCss': opts['defaultCss'],
        'measure': opts['measure']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/{id}/ingredientWidget', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeRecipeNutrition operation.
     * @callback module:api/RecipesApi~visualizeRecipeNutritionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recipe Nutrition Widget
     * Visualize a recipe's nutritional information as HTML including CSS.
     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param {Number} servings The number of servings.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [language] The language of the input. Either 'en' or 'de'.
     * @param {Boolean} [defaultCss] Whether the default CSS should be added to the response.
     * @param {Boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
     * @param {module:api/RecipesApi~visualizeRecipeNutritionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
  }, {
    key: "visualizeRecipeNutrition",
    value: function visualizeRecipeNutrition(ingredientList, servings, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'ingredientList' is set
      if (ingredientList === undefined || ingredientList === null) {
        throw new Error("Missing the required parameter 'ingredientList' when calling visualizeRecipeNutrition");
      }
      // verify the required parameter 'servings' is set
      if (servings === undefined || servings === null) {
        throw new Error("Missing the required parameter 'servings' when calling visualizeRecipeNutrition");
      }
      var pathParams = {};
      var queryParams = {
        'language': opts['language']
      };
      var headerParams = {};
      var formParams = {
        'ingredientList': ingredientList,
        'servings': servings,
        'defaultCss': opts['defaultCss'],
        'showBacklink': opts['showBacklink']
      };
      var authNames = ['apiKeyScheme'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/visualizeNutrition', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeRecipeNutritionByID operation.
     * @callback module:api/RecipesApi~visualizeRecipeNutritionByIDCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recipe Nutrition by ID Widget
     * Visualize a recipe's nutritional information as HTML including CSS.
     * @param {Number} id The recipe id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [defaultCss = true)] Whether the default CSS should be added to the response.
     * @param {module:api/RecipesApi~visualizeRecipeNutritionByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
  }, {
    key: "visualizeRecipeNutritionByID",
    value: function visualizeRecipeNutritionByID(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling visualizeRecipeNutritionByID");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'defaultCss': opts['defaultCss']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/{id}/nutritionWidget', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeRecipePriceBreakdownByID operation.
     * @callback module:api/RecipesApi~visualizeRecipePriceBreakdownByIDCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Price Breakdown by ID Widget
     * Visualize a recipe's price breakdown.
     * @param {Number} id The recipe id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [defaultCss = true)] Whether the default CSS should be added to the response.
     * @param {module:api/RecipesApi~visualizeRecipePriceBreakdownByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
  }, {
    key: "visualizeRecipePriceBreakdownByID",
    value: function visualizeRecipePriceBreakdownByID(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling visualizeRecipePriceBreakdownByID");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'defaultCss': opts['defaultCss']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/{id}/priceBreakdownWidget', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeRecipeTaste operation.
     * @callback module:api/RecipesApi~visualizeRecipeTasteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recipe Taste Widget
     * Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!
     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [language] The language of the input. Either 'en' or 'de'.
     * @param {Boolean} [normalize] Normalize to the strongest taste.
     * @param {String} [rgb] Red, green, blue values for the chart color.
     * @param {module:api/RecipesApi~visualizeRecipeTasteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
  }, {
    key: "visualizeRecipeTaste",
    value: function visualizeRecipeTaste(ingredientList, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'ingredientList' is set
      if (ingredientList === undefined || ingredientList === null) {
        throw new Error("Missing the required parameter 'ingredientList' when calling visualizeRecipeTaste");
      }
      var pathParams = {};
      var queryParams = {
        'language': opts['language']
      };
      var headerParams = {};
      var formParams = {
        'ingredientList': ingredientList,
        'normalize': opts['normalize'],
        'rgb': opts['rgb']
      };
      var authNames = ['apiKeyScheme'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/visualizeTaste', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeRecipeTasteByID operation.
     * @callback module:api/RecipesApi~visualizeRecipeTasteByIDCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recipe Taste by ID Widget
     * Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param {Number} id The recipe id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [normalize = true)] Whether to normalize to the strongest taste.
     * @param {String} [rgb] Red, green, blue values for the chart color.
     * @param {module:api/RecipesApi~visualizeRecipeTasteByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
  }, {
    key: "visualizeRecipeTasteByID",
    value: function visualizeRecipeTasteByID(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling visualizeRecipeTasteByID");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'normalize': opts['normalize'],
        'rgb': opts['rgb']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['apiKeyScheme'];
      var contentTypes = [];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/{id}/tasteWidget', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
}();